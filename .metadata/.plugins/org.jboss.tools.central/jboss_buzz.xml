<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title>Top Linux resources of 2022</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/12/01/top-linux-resources-2022" /><author><name>Heiker Medina</name></author><id>a3441653-fcf1-46d4-9f2c-edf088e96710</id><updated>2022-12-01T07:00:00Z</updated><published>2022-12-01T07:00:00Z</published><summary type="html">&lt;p&gt;As we head towards the end of 2022, Red Hat Developer is taking a look back at the most intriguing and popular content for the technologies that matter most to our readers. We'll start off with a roundup of the best &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; content of 2022, highlighting some of the most popular stories about Red Hat's flagship Linux distribution.&lt;/p&gt; &lt;h2&gt;Containers&lt;/h2&gt; &lt;p&gt;Join Karan Singh as he explains how to shrink the size of Docker container images using the &lt;a href="https://developers.redhat.com/articles/2022/01/17/reduce-size-container-images-dockerslim"&gt;open source project DockerSlim&lt;/a&gt;. If you want to dive deeper and learn more about Podman, an open source container platform that's an alternative to Docker and supported by Red Hat, review the &lt;a href="https://developers.redhat.com/articles/2022/05/02/podman-basics-resources-beginners-and-experts"&gt;resources for beginners and experts&lt;/a&gt; curated by the Red Hat Developer team.&lt;/p&gt; &lt;p&gt;Another exciting improvement is that &lt;a href="https://developers.redhat.com/articles/2022/03/21/hello-podman-using-net"&gt;.NET can now control Podman&lt;/a&gt;! Tom Deseyn introduces &lt;a href="https://developers.redhat.com/articles/2022/08/01/containerize-net-applications-without-writing-dockerfiles"&gt;dotnet build-image&lt;/a&gt;, a tool that creates Dockerfiles and containerized images. You can use build-image to create an image from a .NET application and push it to a repository.&lt;/p&gt; &lt;h2&gt;GCC and GDB&lt;/h2&gt; &lt;p&gt;Keith Seitz offers an introduction to the &lt;a href="https://developers.redhat.com/articles/2022/01/10/gdb-developers-gnu-debugger-tutorial-part-2-all-about-debuginfo"&gt;debugging information&lt;/a&gt; used to describe compiled code. Bruno Larsen then explains how to &lt;a href="https://developers.redhat.com/articles/2022/06/07/how-debug-stack-frames-and-recursion-gdb"&gt;meet debugging challenges with GDB&lt;/a&gt;, the standard open source debugger for C and C++ programs. Lastly, David Malcolm discusses &lt;a href="https://developers.redhat.com/articles/2022/04/12/state-static-analysis-gcc-12-compiler"&gt; Red Hat's work on static analysis&lt;/a&gt; in the current major release of GCC, GCC 12.&lt;/p&gt; &lt;h2&gt;macOS updates&lt;/h2&gt; &lt;p&gt;Many professional Linux developers and sysadmins use Apple hardware for their personal and dev machines, and will want to run virtual Linux servers on their laptops. Varsha Sharma walks us through &lt;a href="https://developers.redhat.com/articles/2022/05/23/how-install-command-line-tools-mac"&gt;how to install a command that is not from the App Store&lt;/a&gt;, using the popular Helm client as an example. Follow along to see how Red Hat created a &lt;a href="https://developers.redhat.com/articles/2022/10/21/rhel-9-and-single-node-openshift-vms-macos-ventura"&gt;beta&lt;/a&gt; to run virtualized versions of two key technologies, RHEL 9 and single-node OpenShift, using Apple silicon. Lastly, join Arnav Bhati to learn how Red Hat Enterprise Linux VMs can be &lt;a href="https://developers.redhat.com/articles/2022/10/25/how-install-vms-and-ansible-automation-platform-mac-m1"&gt;easily installed on Macs&lt;/a&gt; using UTM.&lt;/p&gt; &lt;h2&gt;Regular expression&lt;/h2&gt; &lt;p&gt;Bob Reselman shows you &lt;a href="https://developers.redhat.com/articles/2022/09/14/beginners-guide-regular-expressions-grep"&gt;how to use regular expressions&lt;/a&gt; to declare a pattern you want to match, and outlines the essential regex building blocks. He explains that if you want a more advanced challenge, you can learn &lt;a href="https://developers.redhat.com/articles/2022/10/13/advanced-regex-capture-groups-lookaheads-and-lookbehinds"&gt;how to capture groups, lookaheads, and lookbehinds&lt;/a&gt;. Another notable piece written by Reselman introduces some more &lt;a href="https://developers.redhat.com/articles/2022/09/16/regex-how-quantifiers-pattern-collections-and-word-boundaries"&gt;advanced syntax&lt;/a&gt;: quantifiers, pattern collections, groups, and word boundaries.&lt;/p&gt; &lt;h2&gt;Product announcements&lt;/h2&gt; &lt;p&gt;In one of our top announcements, we clarified what we call development activities and highlighted some exciting uses of the &lt;a href="https://developers.redhat.com/articles/2022/07/06/what-qualifies-red-hat-developer-subscription-teams"&gt;Developer Subscription for Teams&lt;/a&gt;. Another important piece of news is that organizations that use &lt;a href="https://developers.redhat.com/articles/2022/05/10/access-rhel-developer-teams-subscription"&gt;CentOS Linux offerings&lt;/a&gt; to support developers can now access a RHEL subscription and all the benefits of the Red Hat Developer Program.&lt;/p&gt; &lt;h2&gt;Top resources&lt;/h2&gt; &lt;p&gt;Thanks to the hard work of our editors and writers, we released a series of cheat sheets this year. Our first is &lt;a href="https://developers.redhat.com/cheat-sheets/linux-commands-cheat-sheet-old"&gt;Linux Commands&lt;/a&gt;, which offers Linux commands commonly needed by developers, with explanations and screenshots. Next up is &lt;a href="https://developers.redhat.com/cheat-sheets/intermediate-linux-cheat-sheet"&gt;Intermediate Linux Commands&lt;/a&gt;, which covers Linux commands and executables for developers who use Linux in advanced programming scenarios. Lastly, we recently released &lt;a href="https://developers.redhat.com/cheat-sheets/advanced-linux-commands"&gt;Advanced Linux Commands&lt;/a&gt;, which will take your Linux command knowledge to the next level.&lt;/p&gt; &lt;p&gt;Daniel Walsh, who leads the Podman team at Red Hat, wrote the &lt;a href="https://developers.redhat.com/e-books/podman-action-early-access"&gt;Podman in Action&lt;/a&gt; e-book to help you learn Podman quickly. You'll find easy-to-follow examples that include steps to deploy a complete containerized web service.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/12/01/top-linux-resources-2022" title="Top Linux resources of 2022"&gt;Top Linux resources of 2022&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Heiker Medina</dc:creator><dc:date>2022-12-01T07:00:00Z</dc:date></entry><entry><title type="html">This Week in JBoss - December, 1st 2022</title><link rel="alternate" href="https://www.jboss.org/posts/weekly-2022-12-01.html" /><category term="quarkus" /><category term="java" /><category term="jakarta ee" /><category term="wildfly" /><category term="ansible" /><category term="kogito" /><category term="drools" /><author><name>Romain Pelisse</name><uri>https://www.jboss.org/people/romain-pelisse</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2022-12-01.html</id><updated>2022-12-01T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, java, jakarta ee, wildfly, ansible, kogito, drools"&gt; &lt;h1&gt;This Week in JBoss - December, 1st 2022&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Happy December!&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Welcome to our new installment of JBoss Editorial! As the end of the year is near, we are packing as much goodness in this issue as possible, for you to have some passionating reading material to enjoy next to your Christmas tree.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus_still_going_strong"&gt;Quarkus, still going strong&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;On top of the recent releases, of the past few weeks, the Quarkus community took the time to publish an article to present the &lt;a href="https://quarkus.io/blog/quarkus-support-for-aws-lambda-snapstart/"&gt;Quarkus for AWS Lambda Snapstart&lt;/a&gt;. If you have any interest in Quarkus or cloud development, this is certainly a must read!&lt;/p&gt; &lt;p&gt;Last, but not the least, two more, deep articles about Quarkus : one on &lt;a href="https://quarkus.io/blog/reactive-crud-performance-case-study/"&gt;Reactive CRUD performance case study&lt;/a&gt; and the other on &lt;a href="https://quarkus.io/blog/redis-job-queue-reloaded/"&gt;Redis Job Queue - Reloaded&lt;/a&gt; (a followup on Clément’s previous article on &lt;a href="https://quarkus.io/blog/redis-job-queue/"&gt;How to implement a job queue with Redis&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_a_good_time_to_learn_new_or_old_things"&gt;A good time to learn new (or old) things&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;The last two weeks have seen the release of some introductions and presentations articles that are worth mentioning. The first one, my favorite because it talks about an unsung hero of the Wildfly ecosystem, is about : &lt;a href="https://jberet.github.io/jberet-intro/"&gt;Introducing The Java Batch Processing API And JBeret Implementation&lt;/a&gt;. If you have no idea what this is about, please go check it out, this is bound to make your life easier!&lt;/p&gt; &lt;p&gt;After this is definitely this humble article entitled &lt;a href="http://www.mastertheboss.com/java-ee/jakarta-ee/a-maven-starter-for-jakarta-ee-projects/"&gt;A Maven starter for Jakarta EE projects&lt;/a&gt;. Indeed, Maven has been at the heart of Java (and thus JBoss) technology for a long while now (around two decades), so such an introduction, for newcomers and experienced developers alike, is certainly nice to see.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_techbytes"&gt;Techbytes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;If you need something more involved than a quickstarter, there are two articles coming from the Kogito and Drools ecosystem: &lt;a href="https://blog.kie.org/2022/11/kogito-serverless-workflow-event-formats.html"&gt;Kogito serverless workflow event formats&lt;/a&gt; and &lt;a href="https://blog.kie.org/2022/11/drools-reactive-messaging-processing.html"&gt;Drools reactive messaging processing&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_ansible_support_for_jboss_runtimes"&gt;Ansible support for JBoss runtimes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;It’s not strictly speaking JBoss community, but I’m too proud of this baby of mine to keep quiet about it. Since over a year, I’ve been part of an initiative to provide better integration between the automation tool Ansible and many of the middleware solutions being developed by the JBoss Community. We are quite to already have Ansible collections (extension for Ansible) that ease the setup of &lt;a href="https://github.com/ansible-middleware/wildfly"&gt;Wildfly&lt;/a&gt;, &lt;a href="https://github.com/ansible-middleware/infinispan"&gt;Infinispan&lt;/a&gt;, &lt;a href="https://github.com/ansible-middleware/keycloak"&gt;Keycloak&lt;/a&gt;, and &lt;a href="https://github.com/ansible-middleware/amq"&gt;AMQ Broker&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We also provide, for the community, a collection for &lt;a href="https://github.com/ansible-middleware/jws"&gt;Red Hat JBoss Web Server (JWS)&lt;/a&gt; and we are very proud and happy to announce that this collection is now also offered, as tech preview, as part of the last release of Red Hat JWS 5.7: &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_web_server/5.7/html/red_hat_ansible_certified_content_collection_1.2_for_red_hat_jboss_web_server_release_notes/index"&gt;Red Hat Ansible Certified Content Collection 1.2 for Red Hat JBoss Web Server&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are curious about the potential of those collections and how Ansible can help when you deploy JBoss runtimes, please check this (awesome) demo on &lt;a href="https://events.experiences.redhat.com/widget/redhat/rhaf22/SessionCatalog2022/session/16579300056760019EPY"&gt;Ansible Fest Session Catalog: Managing your Red Hat Middleware estate from the edge to the cloud with Ansible&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_releases_releases_releases"&gt;Releases, releases, releases…​&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Releasing is crucial for Open Source project and releasing often is certainly the mark of healthy one, so it comes with no surprises that the last two weeks have already seen their fair share of releases:&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-14-2-final-released/"&gt;Quarkus 2.13.5.Final and 2.14.2.Final&lt;/a&gt; including a fix for &lt;a href="https://access.redhat.com/security/cve/cve-2022-4116"&gt;CVE-2022-4116&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-3-0-0-alpha1-released/"&gt;Quarkus 3.0.0.Alpha1&lt;/a&gt; a first iteration of the Jakarta 10, check it out!&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/intellij-quarkus-tools-1.14.0/"&gt;Quarkus Tools for IntelliJ 1.14.0&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://vertx.io/blog/eclipse-vert-x-4-3-5/"&gt;Eclipse Vert.x 4.3.5&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://galaxy.ansible.com/middleware_automation/infinispan"&gt;Ansible Collection for Infinispan 1.1.1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://galaxy.ansible.com/middleware_automation/jws"&gt;Ansible Collection for JWS 1.2.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;&lt;em&gt;That’s all folks! Please join us again in two weeks for another installment of our JBoss editorial!&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/romain-pelisse.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Romain Pelisse&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;</content><dc:creator>Romain Pelisse</dc:creator></entry><entry><title>How to remotely query indexed caches in Data Grid 8</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/30/remotely-query-indexed-caches-data-grid-8" /><author><name>Alexander Barbosa Ayala</name></author><id>5cab99e0-6a2c-4bf4-9130-268868f0c3d4</id><updated>2022-11-30T07:00:00Z</updated><published>2022-11-30T07:00:00Z</published><summary type="html">&lt;p&gt;The &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/data-grid"&gt;Red Hat Data Grid&lt;/a&gt; is a hosted data storage platform that offers different levels of caching for fast access to data in memory. Well-chosen indexes allow the data store to fetch results faster than non-indexed caches. This article demonstrates how to create indexes in Data Grid and use them in a &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; application built on &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt;. Then we will run and test the application in a &lt;a href="https://developers.redhat.com/topics/containers"&gt;container&lt;/a&gt; on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Understanding indexed cache structure&lt;/h2&gt; &lt;p&gt;To use indexing, you need to define the indexed entity both in Data Grid and on the application side. The example in this article uses a &lt;code&gt;Book&lt;/code&gt; entity, shown in Figure 1.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig1_23.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig1_23.png?itok=e2VVO2k2" width="141" height="121" alt="The Book object contains three fields for which we create indexes." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: The Book object contains three fields for which we create indexes. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Book&lt;/code&gt; structure needs to be mapped on either side of the communication, as a Java object in the application (&lt;code&gt;Book.java&lt;/code&gt;) and as a &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html/cache_encoding_and_marshalling/cache-encoding#protobuf-encoding_storage-formats"&gt;Protocol Buffers (protobuf) schema&lt;/a&gt; in the cache. Figure 2 shows the relationship between all the components using the cache.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/DataGrid-Fig2.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/DataGrid-Fig2.png?itok=oYNEMgWX" width="600" height="235" alt="A relational diagram of the Spring Boot application and Data Grid." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: Both the Spring Boot application and Data Grid define the structure of the Book. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Book.java&lt;/code&gt; class defines the Book entity fields using the &lt;code&gt;@Protodoc&lt;/code&gt; and &lt;code&gt;@Protofiled&lt;/code&gt; annotations as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;package com.redhat.dg8remote.controller; ... @ProtoDoc("@Indexed") public class Book { @ProtoDoc("@Field(index=Index.YES, analyze = Analyze.YES, store = Store.NO)") @ProtoField(number = 1) String title; @ProtoDoc("@Field(index=Index.YES, analyze = Analyze.YES, store = Store.NO)") @ProtoField(number = 2) String description; @ProtoDoc("@Field(index=Index.YES, analyze = Analyze.YES, store = Store.NO)") @ProtoField(number = 3, defaultValue = "0") int publicationYear; @ProtoFactory Book(String title, String description, int publicationYear) { this.title = title; this.description = description; this.publicationYear = publicationYear; } }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;book.proto&lt;/code&gt; schema file defines the same fields as &lt;code&gt;Book.java&lt;/code&gt; does, but using the syntax for a protobuf schema:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-javascript"&gt;syntax = "proto2"; package book_sample; /** * @Indexed */ message Book { /** * @Field(index=Index.YES, analyze = Analyze.YES, store = Store.NO) */ optional string title = 1; /** * @Field(index=Index.YES, analyze = Analyze.YES, store = Store.NO) */ optional string description = 2; /** * @Field(index=Index.YES, analyze = Analyze.YES, store = Store.NO) */ optional int32 publicationYear = 3 [default = 0]; }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To use indexes, you also need to make changes in the XML definition of the Data Grid cache.&lt;/p&gt; &lt;p&gt;First, you need to add an &lt;code&gt;&lt;indexing&gt;&lt;/code&gt; element. This element causes the data marshaling process to use the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html/cache_encoding_and_marshalling/marshalling_user_types#protostream_marshalling"&gt;ProtoStream library&lt;/a&gt; to handle protobufs. Then, define the  &lt;code&gt;&lt;indexed-entity&gt;&lt;/code&gt; element referring to the &lt;code&gt;&lt;package&gt;.&lt;entity-name&gt;&lt;/code&gt; structure. &lt;/p&gt; &lt;p&gt;For the current article the indexed cache should be configured as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &lt;replicated-cache name="books" mode="SYNC" statistics="true"&gt; &lt;indexing enabled="true"&gt; &lt;indexed-entities&gt; &lt;indexed-entity&gt;book_sample.Book&lt;/indexed-entity&gt; &lt;/indexed-entities&gt; &lt;/indexing&gt; &lt;/replicated-cache&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the default cache &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html/cache_encoding_and_marshalling/cache-encoding#encoding-caches-protostream_storage-formats"&gt;encoding&lt;/a&gt; is &lt;code&gt;application/x-protostream. &lt;/code&gt;Therefore, no additional elements are required for this cache configuration.&lt;/p&gt; &lt;h2&gt;The remote query application&lt;/h2&gt; &lt;p&gt;The current query demo application is based on the example provided in the Data Grid documentation section &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html-single/querying_data_grid_caches/index#querying-hot-rod_query-remote"&gt;Querying caches from Hot Rod Java clients&lt;/a&gt;. I have adapted this application and configured it to run as a Spring Boot application. The application can run standalone or be deployed in a containerized environment such as OpenShift. The code source can be found in the &lt;a href="https://github.com/alexbarbosa1989/dg8remote/tree/openshift/src/main/java/com/redhat/dg8remote"&gt;dg8remote&lt;/a&gt; demo project on GitHub.&lt;/p&gt; &lt;p&gt;The application defines three classes for remote query and entity definition. A fourth class implements data marshaling (Figure 3).&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig3_8.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig3_8.png?itok=w5j4CWH-" width="287" height="461" alt="The example application defines three classes for queries and one class for data marshaling." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3: The example application defines three classes for queries and one class for data marshaling. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt; &lt;/p&gt; &lt;p&gt;The classes have the following purposes:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/alexbarbosa1989/dg8remote/blob/openshift/src/main/java/com/redhat/dg8remote/controller/Book.java"&gt;Book.java&lt;/a&gt;: Contains the fields for the Book entity. Each field has &lt;code&gt;@Protodoc&lt;/code&gt; and &lt;code&gt;@Protofield&lt;/code&gt; annotations for indexing purposes.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/alexbarbosa1989/dg8remote/blob/openshift/src/main/java/com/redhat/dg8remote/controller/RemoteQueryInitializer.java"&gt;RemoteQueryInitializer.java&lt;/a&gt;: An interface that contains the protobuf schema details, such as a &lt;code&gt;Book&lt;/code&gt; class reference for automatic proto file generation, package name, proto file name, and path.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/alexbarbosa1989/dg8remote/blob/openshift/src/main/java/com/redhat/dg8remote/controller/RemoteQuery.java"&gt;RemoteQuery.java&lt;/a&gt;: Contains the exposed REST service that returns the query results. The constructor uploads the generated &lt;code&gt;book.proto&lt;/code&gt; file in the Remote Data Grid instance. This class also tells the compiler to generate a &lt;code&gt;RemoteQueryInitializerImp&lt;/code&gt; schema.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/alexbarbosa1989/dg8remote/blob/openshift/src/main/java/com/redhat/dg8remote/InfinispanConfiguration.java"&gt;InfinispanConfiguration.java&lt;/a&gt;: Adds a marshaller, which is needed in the client to serialize the application's object.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Running the remote query service&lt;/h2&gt; &lt;p&gt;For the current demo, deploy the Data Grid cache cluster and the remote query service on OpenShift. The caches and the service are in separate projects, just like the original version of the application described in the article &lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid"&gt;Integrate a Spring Boot application with Red Hat Data Grid&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Environment details&lt;/h3&gt; &lt;p&gt;I used the following versions of the components that make up this example:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Red Hat Data Grid 8.3&lt;/li&gt; &lt;li&gt;Red Hat OpenShift 4.10&lt;/li&gt; &lt;li&gt;Spring Boot 2.7.2&lt;/li&gt; &lt;li&gt;Java 11&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Defining the Data Grid cluster custom resource&lt;/h2&gt; &lt;p&gt;The previous article explains how the Data Grid cluster is generated using an Operator. We have to make one change in our example to expose the cluster through the LoadBalancer. Here is how our configuration looks:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-yaml"&gt;apiVersion: infinispan.org/v1 kind: Infinispan metadata: name: infinispan-test namespace: dgtest spec: expose: type: LoadBalancer service: type: DataGrid replicas: 2&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Creating the book cache&lt;/h2&gt; &lt;p&gt;To create the cache, go to the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html-single/data_grid_operator_guide/index#connecting-console_clients"&gt;Data Grid Web Console&lt;/a&gt; in a browser, then create a custom cache named &lt;code&gt;books&lt;/code&gt; using the following JSON code. Include the &lt;code&gt;book_sample.Book&lt;/code&gt; indexed entity as shown. Figure 4 shows where to enter the JSON.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-json"&gt;{ "replicated-cache": { "mode": "SYNC", "statistics": true, "indexing": { "enabled": true, "indexed-entities": [ "book_sample.Book" ] } } }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finish by clicking the &lt;strong&gt;Create&lt;/strong&gt; button:&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig4_6.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig4_6.png?itok=OxmLvCp0" width="600" height="312" alt="Enter the JSON configuration and create the books cache." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4: Enter the JSON configuration and create the books cache. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt; &lt;/p&gt; &lt;p&gt;There are other ways to create caches, detailed in &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html-single/data_grid_operator_guide/index#creating-caches"&gt;Data Grid Documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Configuring the application to use the data grid cluster&lt;/h2&gt; &lt;p&gt;Clone the remote query service project:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ git clone -b openshift https://github.com/alexbarbosa1989/dg8remote&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to &lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid"&gt;Integrate a Spring Boot application with Red Hat Data Grid&lt;/a&gt; and follow the instructions in &lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid#gather_relevant_data_grid_cluster_data"&gt;Gather relevant Data Grid cluster data&lt;/a&gt; and &lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid#how_to_deploy_the_spring_boot_project"&gt;How to deploy the Spring Boot project&lt;/a&gt;. The &lt;code&gt;application.properties&lt;/code&gt; file should look like the following:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;# context-path server.servlet.context-path=/redhat # allow all endoints exposure management.endpoints.web.exposure.include=* # Connection infinispan.remote.server-list=181.123.123.123:11222 infinispan.remote.client-intelligence=BASIC # Authentication infinispan.remote.use-auth=true infinispan.remote.sasl-mechanism=BASIC infinispan.remote.auth-realm=default infinispan.remote.auth-server-name=infinispan-test infinispan.remote.auth-username=developer infinispan.remote.auth-password=ygwaioo0XWhxMtBU infinispan.remote.sasl_properties.javax.security.sasl.qop=auth # Encryption infinispan.remote.sni_host_name=181.123.123.123 infinispan.remote.trust_store_file_name=/mnt/secrets/truststore.jks infinispan.remote.trust_store_password=password infinispan.remote.trust_store_type=jks # Marshalling infinispan.remote.marshaller=org.infinispan.commons.marshall.ProtoStreamMarshaller infinispan.remote.java-serial-allowlist=com.*,org.* infinispan.remote.java-serial-whitelist=com.*,org.* infinispan.client.hotrod.marshaller=org.infinispan.commons.marshall.ProtoStreamMarshaller infinispan.client.hotrod.java_serial_allowlist=com.*,org.* infinispan.client.hotrod.java_serial_whitelist=com.*,org.*&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because we are using the LoadBalancer, the &lt;code&gt;infinispan.remote.server-list&lt;/code&gt; property has an assigned external IP address for the data grid service, exposed by OpenShift, instead of the SVC name rendered by DNS that appeared in the original version of the application. You can the IP address using the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc get svc |grep external infinispan-test-external LoadBalancer 10.20.21.22 181.123.123.123 11222:30890/TCP 22m &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Deploying the remote query application in OpenShift&lt;/h2&gt; &lt;p&gt;After updating the properties file, it's time to &lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid#create_a_new_project_in_openshift_for_spring_boot_application_deployment"&gt;create a new OpenShift project&lt;/a&gt;. You can create it in the same OpenShift cluster where the Data Grid cluster is running or in a different remote cluster. A remote cluster can be used because you have external access to the Data Grid cluster via LoadBalancer:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc new-project springboot-test&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now, you can &lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid#deploy_the_spring_boot_application"&gt;deploy the remote query application&lt;/a&gt;. Take care to run the following command from the application's new OpenShift project, which you can get into using the &lt;code&gt;oc project springboot-test&lt;/code&gt; command. Compile and deploy the application as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ mvn clean fabric8:deploy -Popenshift&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, create a secret that will store the Keystore generated in the previous step:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc create secret generic truststore-secret --from-file=truststore.jks $ oc set volume dc/hotrodspringboot --add --name=truststore-secret -m /mnt/secrets/ -t secret --secret-name=truststore-secret --default-mode='0755'&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Testing the remote query&lt;/h2&gt; &lt;p&gt;Once you have deployed the application, you can test the remote query integration. You must get the exposed route for the service by using the &lt;code&gt;oc get routes&lt;/code&gt; command. Here is the output:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc get routes NAME HOST/PORT remote-query remote-query-springboot-test.openshiftcluster.com PATH SERVICES PORT TERMINATION WILDCARD remote-query 8080 None&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Send a request to the REST endpoint for the service using the &lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ curl -X GET http://remote-query-springboot-test.openshiftcluster.com/redhat/query-cache/ - Book title 10 - 2022% &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's understand what happened when you invoked the&lt;code&gt;/query-cache&lt;/code&gt; service. First, as mentioned earlier, the Data Grid cluster imported the &lt;code&gt;book.proto&lt;/code&gt; structure to get the data structure needed to process the request from the remote query service. The &lt;code&gt;proto.book&lt;/code&gt; file was generated when you compiled the &lt;code&gt;RemoteQueryInitializer.java&lt;/code&gt; class. The &lt;code&gt;RemoteQuery.java&lt;/code&gt; constructor uploads the &lt;code&gt;proto.book&lt;/code&gt; file into the Data Grid cluster. The following code in the &lt;code&gt;RemoteQuery&lt;/code&gt; class puts that generated schema into the Data Grid cluster's cache data structure:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt;public class RemoteQuery { ... @Autowired public RemoteQuery(RemoteCacheManager cacheManager) { ... GeneratedSchema schema = new RemoteQueryInitializerImpl(); metadataCache.put(schema.getProtoFileName(), schema.getProtoFile()); } ... }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Having the schema mapped on both sides, as shown in Figure 2, the service uploads a set of &lt;code&gt;Book&lt;/code&gt; objects into a Map and stores them in the Data Grid cache.&lt;/p&gt; &lt;p&gt;Data Grid executes the query and put the resultset into a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Book&lt;/code&gt; objects. This query gets all books that contain the characters '&lt;code&gt;10'&lt;/code&gt; in their titles:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-java"&gt; QueryFactory queryFactory = Search.getQueryFactory(remoteCache); Query&lt;Book&gt; query = queryFactory.create("FROM book_sample.Book WHERE title:'10'"); List&lt;Book&gt; list = query.execute().list();&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Our example performs both the data load into the cache and the query in the same &lt;code&gt;/query-cache&lt;/code&gt; service for the purpose of simplicity. However, each step could also be performed in different services, depending on the use case and application architecture.&lt;/p&gt; &lt;p&gt;There are also multiple ways to perform queries. The Ickle query syntax is explained in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html/querying_data_grid_caches/ickle-query-language#doc-wrapper"&gt;Data Grid documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Adding indexes to Data Grid is easy and beneficial&lt;/h2&gt; &lt;p&gt;This article demonstrated how you can easily add Indexes to Data Grid. Indexed caches offer benefits such as:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Remote queries&lt;/li&gt; &lt;li&gt;Supports more complex data based on entities with multiple fields.&lt;/li&gt; &lt;li&gt;A broad range of query alternatives, shaped according to each use case.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The official &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.3/html/querying_data_grid_caches/indexing-caches"&gt;product documentation&lt;/a&gt; contains details about indexing in Red Hat Data Grid. Please comment below if you have questions. We welcome your feedback.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/30/remotely-query-indexed-caches-data-grid-8" title="How to remotely query indexed caches in Data Grid 8"&gt;How to remotely query indexed caches in Data Grid 8&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Alexander Barbosa Ayala</dc:creator><dc:date>2022-11-30T07:00:00Z</dc:date></entry><entry><title type="html">A Maven starter for Jakarta EE projects</title><link rel="alternate" href="http://www.mastertheboss.com/java-ee/jakarta-ee/a-maven-starter-for-jakarta-ee-projects/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java-ee/jakarta-ee/a-maven-starter-for-jakarta-ee-projects/</id><updated>2022-11-29T13:05:15Z</updated><content type="html">This short article will teach you how to kickstart a simple Jakarta EE project using a Maven archetype that includes the basic building blocks for developing an application. The Jakarta Eclipse starter The Jakarta EE starter is available in two flavours: Next, let’s run the above command and check the outcome: The built-in application includes ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>How the new VSCode XML extension improves developer experience</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/29/new-vscode-xml-extension-improves-developer-experience" /><author><name>Mohit Suman, Angelo Zerr, Jessica He</name></author><id>881f18ea-6283-40bc-9066-213290e552e2</id><updated>2022-11-29T07:00:00Z</updated><published>2022-11-29T07:00:00Z</published><summary type="html">&lt;p&gt;At Red Hat, we look forward to creating and updating tools to improve the developer experience for users of various language servers. &lt;a href="https://code.visualstudio.com/docs"&gt;Visual Studio Code&lt;/a&gt; is one of the most popular tools for developers. The rich ecosystem of multiple extensions makes it more powerful.&lt;/p&gt; &lt;p&gt;We are excited to announce the release of &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml"&gt;VSCode XML&lt;/a&gt; Extension 0.22.0 in Visual Studio Code Marketplace and OpenVSX Registry and the addition of more improvements and features to work with XML and improve the overall developer experience.&lt;/p&gt; &lt;h2&gt;A little VSCode XML history&lt;/h2&gt; &lt;p&gt;The VSCode team has continuously worked with the community and received user feedback and requests. It is interesting to see the evolution of the software based on these requests. The extension was originally created to manage pom.xml files of maven projects with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;VSCode Java&lt;/a&gt; extension and provide XML and XSD support.&lt;/p&gt; &lt;p&gt;VSCode XML uses the LemMinx language server written in Java to provide the various language features. However, this required Java installation. Over time, we received more and more requests from users to use the extension without Java. That's why we provided the binary feature to run the language server without Java.&lt;/p&gt; &lt;p&gt;Because of multiple feature requests for RelaxNG support, we integrated &lt;a href="https://github.com/relaxng/jing-trang"&gt;Jing&lt;/a&gt; to implement RelaxNG support in the VSCode XML extension. This has been a great addition to the extension's feature list and has shown an upward trend in usage after the release.&lt;/p&gt; &lt;p&gt;Since then, we have made multiple improvements. In this blog, we will focus on two important features added to the current release.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Features/RelaxNGFeatures.md"&gt;RelaxNG support&lt;/a&gt; provides completion, hover, and validation in XML files based on RelaxNG schemas.&lt;/li&gt; &lt;li&gt;We have made improvements to our &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Formatting.md#xmlformatexperimental"&gt;experimental XML formatter&lt;/a&gt;.&lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;1. RelaxNG support&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Features/RelaxNGFeatures.md"&gt;&lt;u&gt;RelaxNG support&lt;/u&gt;&lt;/a&gt; provides completion, hover, and validation in XML files based on RelaxNG schemas (&lt;a href="https://relaxng.org/tutorial-20011203.html"&gt;&lt;u&gt;XML syntax&lt;/u&gt;&lt;/a&gt; and &lt;a href="https://relaxng.org/compact-tutorial-20030326.html"&gt;&lt;u&gt;compact syntax&lt;/u&gt;&lt;/a&gt;). Figure 1 explains the workflow:&lt;/p&gt; &lt;figure role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/1.gif"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/1.gif" width="512" height="222" alt="An illustration of relax-ng-support." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: The RelaxNG support workflow. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Validation&lt;/h3&gt; &lt;p&gt;XML validation based on RelaxNG (&lt;code&gt;rng&lt;/code&gt; and &lt;code&gt;rnc&lt;/code&gt;) is supported as shown in Figure 2:&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/2_0.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/2_0.png?itok=afz8G3ic" width="512" height="233" alt="An illustration xml-validation process based on RelaxNG." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: The XML validation process based on RelaxNG. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h3&gt;Completion&lt;/h3&gt; &lt;p&gt;It supports XML completion based on RelaxNG (&lt;code&gt;rng&lt;/code&gt;, &lt;code&gt;rnc&lt;/code&gt;). The completion for &lt;code&gt;rng&lt;/code&gt; displays the documentation in Figure 3:&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/3_3.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/3_3.png?itok=fvm3epaQ" width="512" height="215" alt="The xml-completion process based on RelaxNG." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3: The XML completion process based on RelaxNG. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt; &lt;/p&gt; &lt;h3&gt;Hover&lt;/h3&gt; &lt;p&gt;Hover based on RelaxNG &lt;code&gt;rng&lt;/code&gt; shows the documentation in Figure 4:&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/4_1.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/4_1.png?itok=rQqz3RF7" width="512" height="170" alt="An illustration of xml-hover based on RelaxNG." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4: Hover based on RelaxNG. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h3&gt;Go to type definition&lt;/h3&gt; &lt;p&gt;From the XML document, you can go to the type definition to navigate to the element/attribute declaration for &lt;code&gt;rnc&lt;/code&gt; and&lt;/p&gt; &lt;p&gt;To do this, select an XML element/attribute and use the contextual menu &lt;code&gt;Go to Type Definition&lt;/code&gt; as shown in Figure 5.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/5_2.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/5_2.png?itok=XktUjogE" width="512" height="246" alt="The XML Go To Type Definition action." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 5: The XML Go To Type Definition action. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt; &lt;/p&gt; &lt;p&gt;When you click on this menu item, VS Code will open the &lt;code&gt;rng&lt;/code&gt; or &lt;code&gt;rnc&lt;/code&gt; grammar file and place the cursor on the proper &lt;code&gt;element/attribute&lt;/code&gt; declaration as shown in Figure 6.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/6_0.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/6_0.png?itok=ZsjWimfH" width="512" height="260" alt="An illustration of the xml-grammar file support." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 6: The XML grammar file support. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;2. The experimental formatter&lt;/h2&gt; &lt;p&gt;The current XML formatter works correctly when XML is valid. For instance, given the following XML content:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;foo&gt;&lt;bar&gt;&lt;/bar&gt;&lt;/foo&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The XML is formatted like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;foo&gt;   &lt;bar&gt;&lt;/bar&gt; &lt;/foo&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But when XML content is invalid, as in the following example:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;&lt;foo&gt;&lt;bar'&lt;/bar&gt;&lt;/foo&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The XML is formatted like the following:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;foo&gt;   &lt;bar&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The formatter will lose all the invalid content, which can be extremely annoying. It is one reason we re-implemented a formatter from scratch with a new strategy. Here is the invalid content from above reformatted with the new experimental formatter:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;foo&gt; &lt;bar'&lt;/bar&gt;&lt;/foo&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To activate the experimental formatter, set &lt;strong&gt;“xml &gt; Format: Experimental”&lt;/strong&gt; to “&lt;strong&gt;true&lt;/strong&gt;” on the VS Code Settings Page or add the following to your settings.json:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-json"&gt;"xml.format.experimental": true&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This also opens the extension to the possibility of supporting XML with various embedded content within XML documents (eg. EJS).&lt;/p&gt; &lt;p&gt;Our goal is to make this new formatter the default once it supports all features of the current formatter. Please don’t hesitate to create &lt;a href="https://github.com/redhat-developer/vscode-xml/issues"&gt;any issues&lt;/a&gt; to improve the experimental formatter.&lt;/p&gt; &lt;h2&gt;How the new formatter works&lt;/h2&gt; &lt;p&gt;The current formatter gets the &lt;a href="https://www.w3.org/DOM/DOMTR"&gt;DOM document&lt;/a&gt;, the abstract representation of the XML document that &lt;code&gt;vscode-xml&lt;/code&gt; uses and rewrites the content of the document in one text edit:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt;[     {         "range": {             "start": {                 "line": 0,                 "character": 0             },             "end": {                 "line": 0,                 "character": 22             }         },         "newText": "&lt;foo&gt;\r\n\t&lt;bar&gt;&lt;/bar&gt;\r\n&lt;/foo&gt;"     } ]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The new experimental formatter preserves all non-whitespace content and inserts or removes spaces to correctly indent the XML content. In the following sample, two TextEdit are generated. The insert/replace characters avoid losing invalid content.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt;[ { "range": { "start": { "line": 0, "character": 5 }, "end": { "line": 0, "character": 5 } }, "newText": "\r\n\t" }, { "range": { "start": { "line": 0, "character": 16 }, "end": { "line": 0, "character": 16 } }, "newText": "\r\n" } ] &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;New experimental formatter settings&lt;/h2&gt; &lt;p&gt;In addition to a list of default elements where whitespace will be preserved, users may choose to modify this with their own set of elements. Refer to the documentation &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Formatting.md#xmlformatpreservespace"&gt;preserve space page&lt;/a&gt; for more information.&lt;/p&gt; &lt;p&gt;The following example shows two ways in which whitespaces will be preserved.&lt;/p&gt; &lt;p&gt;(Note: XML remains the same after formatting.)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Method #1&lt;/strong&gt;: Figure 7 shows &lt;code&gt;literallayout&lt;/code&gt; in the list of default elements where whitespaces will be preserved.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/7-1.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/7-1.png?itok=MdoJv8Jk" width="473" height="234" alt="The xml-literal-layout tag support." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 7: The literallayout tag support. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Method #2&lt;/strong&gt;: Figure 8 shows that any element with &lt;code&gt;xml:space = “preserve” &lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;will preserve whitespaces.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/7-2.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/7-2.png?itok=zXnvQQJR" width="452" height="235" alt="Preserve space support in XML." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 8: Preserve space support in XML. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;Support for the ability to set a maximum line width has been &lt;a href="https://github.com/redhat-developer/vscode-xml/issues/350"&gt;&lt;u&gt; requested and upvoted by many users&lt;/u&gt;&lt;/a&gt;. Currently, this setting works with text content and comments. We are on track to extend this feature to cover other use cases such as attributes and ensure its behavior is consistent when applied in combination with other settings. Refer to the documentation for &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Formatting.md#xmlformatmaxlinewidth"&gt;maximum line width&lt;/a&gt; formatting.&lt;/p&gt; &lt;p&gt;The example in Figure 9 shows formatting with &lt;code&gt;maxLineWidth&lt;/code&gt; set to the default value of 80.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/8.gif"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/8.gif" width="512" height="162" alt="The XML max line width support." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 9: The XML max line width support. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;There are a growing number of use cases supported with this setting. This option enables the formatter to consider &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Formatting.md#xmlformatgrammarawareformatting"&gt;XML Schema/DTD grammar information&lt;/a&gt; when making decisions. For instance, an element defined as “&lt;code&gt;xs:string&lt;/code&gt;” in the schema will preserve any whitespace in the content when formatting.&lt;/p&gt; &lt;p&gt;For more information on the specific use cases, visit the official VSCode XML &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/docs/Formatting.md#xmlformatgrammarawareformatting"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Contribute and get support&lt;/h2&gt; &lt;p&gt;This is an open-source project available to anyone. Contributions are extremely welcome! To get started, refer to the &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/main/CONTRIBUTING.md"&gt;contributing instructions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you encounter any bugs, confusing commands, or unclear documentation, or if you would like to propose a feature request, you can:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;File a bug in &lt;a href="https://github.com/redhat-developer/vscode-xml/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Chat with us on &lt;a href="https://gitter.im/redhat-developer/vscode-xml"&gt;Gitter&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Review documentation on &lt;a href="https://github.com/redhat-developer/vscode-xml/tree/main/docs"&gt;GitHub&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Refer to the &lt;a href="https://github.com/redhat-developer/vscode-xml/releases/tag/0.22.0"&gt;Release Notes&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;We are actively working to improve the developer experience with XML. Stay tuned for more features coming soon!&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/29/new-vscode-xml-extension-improves-developer-experience" title="How the new VSCode XML extension improves developer experience"&gt;How the new VSCode XML extension improves developer experience&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Mohit Suman, Angelo Zerr, Jessica He</dc:creator><dc:date>2022-11-29T07:00:00Z</dc:date></entry><entry><title type="html">Drools Reactive Messaging processing</title><link rel="alternate" href="https://blog.kie.org/2022/11/drools-reactive-messaging-processing.html" /><author><name>Toshiya Kobayashi</name></author><id>https://blog.kie.org/2022/11/drools-reactive-messaging-processing.html</id><updated>2022-11-29T03:15:33Z</updated><content type="html">The latest Drools 8.31.0.Final comes with a Reactive Messaging example, which demonstrates reactively consuming messages from a Kafka topic, firing rules and then sending result messages to another Kafka topic. You can find it in . This blog post explains how it works. HOW TO RUN THE EXAMPLE Clone drools repository $ git clone https://github.com/kiegroup/drools.git Go to the example directory $ cd drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/ docker-compose.yml is provided for a quick test with Kafka and Kafdrop. $ docker-compose up -d Build and start the application with dev mode. $ mvn clean compile quarkus:dev Open another terminal and send a message to a Kafka topic events $ echo '{"type":"temperature","value":35}' | kafka-console-producer.sh --broker-list localhost:9092 --topic events You will see STDOUT log in the terminal where the application is running. It means the message is consumed and the rule is fired. rule IncomingEvent fired : Event [type=temperature, value=35] If you access Kafdrop with a browser, which is already started by docker-compose, you will find alerts topic. You can confirm the result message sent by the rule. {"severity":"warning","message":"Event [type=temperature, value=35]"} To shutdown the app, press Ctrl+C on the terminal. To shutdown Kafka and Kafdrop, $ docker-compose down HOW IT WORKS Here is the diagram of this example architecture. The important part is how to connect Drools DataSources with Kafka topics. Thanks to Quarkus’ reactive messaging support, we can achieve it with a very small amount of codes. In order to get reactive messaging support with Kafka, you just need to have a dependency quarkus-smallrye-reactive-messaging-kafka. &lt;dependency&gt; &lt;groupId&gt;io.quarkus&lt;/groupId&gt; &lt;artifactId&gt;quarkus-smallrye-reactive-messaging-kafka&lt;/artifactId&gt; &lt;/dependency&gt; Take a look at Adaptor class. @Startup @ApplicationScoped public class Adaptor { @Inject RuleUnit&lt;AlertingUnit&gt; ruleUnit; AlertingUnit alertingUnit; RuleUnitInstance&lt;AlertingUnit&gt; ruleUnitInstance; @Inject @Channel("alerts") Emitter&lt;Alert&gt; emitter; @PostConstruct void init() { this.alertingUnit = new AlertingUnit(); this.ruleUnitInstance = ruleUnit.createInstance(alertingUnit); alertingUnit.getAlertData().subscribe(DataObserver.of(emitter::send)); } @Incoming("events") public void receive(Event event) throws InterruptedException { alertingUnit.getEventData().append(event); ruleUnitInstance.fire(); } } With @Incoming("events"), you can receive Event object from Kafka topic events. This association is configured in application.properties. mp.messaging.incoming.events.connector=smallrye-kafka mp.messaging.incoming.events.topic=events mp.messaging.incoming.events.value.deserializer=org.drools.quarkus.ruleunit.examples.reactive.EventDeserializer mp.messaging.outgoing.alerts.connector=smallrye-kafka mp.messaging.outgoing.alerts.topic=alerts mp.messaging.outgoing.alerts.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer When "IncomingEvent" rule is fired, an Alert object is appended to DataStream alertData. rule IncomingEvent when $e : /eventData [ type == "temperature", value &gt;= 30 ] then System.out.println("rule IncomingEvent fired : "+ $e); Alert alert = new Alert( "warning", $e.toString() ); alertData.append( alert ); end As you see in Adaptor.init(), the Alert object will be sent to Kafka topic alerts. Now you can develop a rule service which consumes messages reactively in a micro service environment. GOING FORWARD We plan to develop Specialized DataSources to connect out-of-the-box Drools rule units with external frameworks and tools, e.g. reads/writes from a Kafka topic even without a glue code like the Adaptor class. Stay tuned! The post appeared first on .</content><dc:creator>Toshiya Kobayashi</dc:creator></entry><entry><title>Quarkus 2.14.2.Final and 2.13.5.Final released - Fix for CVE-2022-4116</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-2-14-2-final-released/&#xA;            " /><author><name>Guillaume Smet (https://twitter.com/gsmet_)</name></author><id>https://quarkus.io/blog/quarkus-2-14-2-final-released/</id><updated>2022-11-28T00:00:00Z</updated><published>2022-11-28T00:00:00Z</published><summary type="html">Today, we are announcing the release of Quarkus 2.14.2.Final and Quarkus 2.13.5.Final. Both releases fix CVE-2022-4116 which has been rated as severity high. This fix also hardens CORS handling, including changing 200 OK to 403 FORBIDDEN when a CORS request is rejected because of an invalid origin. It is highly...</summary><dc:creator>Guillaume Smet (https://twitter.com/gsmet_)</dc:creator><dc:date>2022-11-28T00:00:00Z</dc:date></entry><entry><title>.NET, Go, Kamelets, and more: Top articles from November 2022</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/24/net-go-kamelets-and-more-top-articles-november-2022" /><author><name>Heiker Medina</name></author><id>8a3c16cc-51fd-42d2-bf3d-741065b76de7</id><updated>2022-11-24T07:00:00Z</updated><published>2022-11-24T07:00:00Z</published><summary type="html">&lt;p&gt;Whether you'll soon be signing off for a fall November break or working through the end of the month, take a moment to check out Red Hat Developer's latest top-performing articles. We've highlighted the tutorial guides and announcements that our developer community has engaged with the most.&lt;/p&gt; &lt;h2&gt;Announcements&lt;/h2&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/08/net-7-now-available-rhel-and-openshift"&gt;.NET 7 now available for RHEL and OpenShift&lt;/a&gt;:&lt;/strong&gt; This short overview from John Clingan discusses what you need to know about &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;.NET&lt;/a&gt; 7. The .NET 7 release is now available, targeting &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 8.7, RHEL 9.1, and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/04/intros-deep-dives-and-announcements-our-best-october-2022"&gt;Intros, deep dives, and announcements: Our best of October 2022&lt;/a&gt;:&lt;/strong&gt; Here are some highlights from Red Hat Developer for October 2022, organized by product announcements, topic roundups, learning guides, and advanced deep dives&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Tutorials&lt;/h2&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs"&gt;3 ways to embed a commit hash in Go programs&lt;/a&gt;:&lt;/strong&gt; When you need to view the source code of an older version of your software, it is handy to have the history feature turned on. Panagiotis Georgiadis's guide explains how to see what your &lt;a href="https://developers.redhat.com/topics/go"&gt;Go&lt;/a&gt; program looked like at various points in time, so you can debug issues that may have been introduced at specific points.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/09/how-static-application-security-testing-improves-software-security"&gt;How static application security testing improves software security&lt;/a&gt;:&lt;/strong&gt; Join Florencio Cano Gabarda as he explains why static application security testing (SAST) is an effective tool for improving the security of your application. Developers can use SAST to identify potential security problems in the source code for an application, its bytecode, or its binary code. Many SAST tools are mature and widely used by software developers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/08/introduction-debug-events-learn-how-use-breakpoints"&gt;An introduction to debug events: Learn how to use breakpoints&lt;/a&gt;:&lt;/strong&gt; This article kicks off a series about GDB's debugging capabilities. Keith Seitz will be covering the commands, convenience variables, and functions that will aid you in stopping GDB at the right place at the right time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/01/how-kamelets-simplify-camel-integrations-kubernetes"&gt;How Kamelets simplify Camel integrations on Kubernetes&lt;/a&gt;:&lt;/strong&gt; Modern applications are often made of a collection of several smaller applications, or subsystems. This article explains how Apache Camel and &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; make it easy to integrate such services through Kamelets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/07/build-reactive-apps-kubernetes-using-camel-k"&gt;Build reactive apps on Kubernetes using Camel K&lt;/a&gt;:&lt;/strong&gt; In this article, Sumit Mukherjee will explain how &lt;a href="https://developers.redhat.com/topics/camel-k"&gt;Apache Camel K&lt;/a&gt; can make it easier to develop reactive applications on Kubernetes by integrating data sources, &lt;a href="https://developers.redhat.com/topics/kafka-kubernetes"&gt;Apache Kafka&lt;/a&gt; brokers, and Knative for event management.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/03/nodejs-reference-architecture-part-10-accessibility"&gt;Node.js Reference Architecture, Part 10: Accessibility&lt;/a&gt;:&lt;/strong&gt; Michael Dawson guides you through the importance of integrating accessibility within your &lt;a href="https://developers.redhat.com/topics/nodejs"&gt;Node.js&lt;/a&gt; applications. Making your applications accessible to disabled users is good business and often required by law. As a Node.js developer, you need to understand the issues around accessibility so that you can build truly accessible components into the applications you build.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/10/set-openshift-cluster-deploy-application-odo-cli"&gt;Set up an OpenShift cluster to deploy an application in odo CLI&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/10/implement-restapi-application-mongodb-using-sbo"&gt;Implement a Rest API application with MongoDB using SBO&lt;/a&gt;:&lt;/strong&gt; In this two-part series, Francesco Ilario shows you how to use &lt;code&gt;odo&lt;/code&gt; to create an application and a database service, bind the application to the database using the Service Binding Operator, and get access to the application's REST API. You'll deploy a REST API application and bind it to a MongoDB using &lt;code&gt;odo&lt;/code&gt; and the Service Binding Operator. The series shows you how easy it is to create an instance of a database and a binding (connection) between the application and that database.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;November 2022 on Red Hat Developer&lt;/h2&gt; &lt;p&gt;Here's the full lineup of articles published on Red Hat Developer this month:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/21/why-gpus-are-essential-computing"&gt;Why GPUs are essential for AI and high-performance computing&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/18/modernize-scale-new-migration-toolkit-applications"&gt;Modernize at scale with the new migration toolkit for applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/17/new-features-openmp-51-and-openmp-52"&gt;New features in OpenMP 5.1 and OpenMP 5.2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/17/benchmarking-improved-conntrack-performance-ovs-300"&gt;Benchmarking improved conntrack performance in OvS 3.0.0&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/16/whats-new-red-hat-enterprise-linux-91"&gt;What's new in Red Hat Enterprise Linux 9.1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/16/openshift-essential-containerized-applications"&gt;Why OpenShift is essential for containerized applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/15/knative-broker-enhances-kafka-openshift-serverless"&gt;How Knative broker GA enhances Kafka on OpenShift Serverless&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/15/how-categorize-c-programs-behavior"&gt;How to categorize C programs by behavior&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs"&gt;3 ways to embed a commit hash in Go programs&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/10/implement-restapi-application-mongodb-using-sbo"&gt;Implement a Rest API application with MongoDB using SBO&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/10/set-openshift-cluster-deploy-application-odo-cli"&gt;Set up an OpenShift cluster to deploy an application in odo CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/09/how-static-application-security-testing-improves-software-security"&gt;How static application security testing improves software security&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/08/net-7-now-available-rhel-and-openshift"&gt;.NET 7 now available for RHEL and OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/08/visual-guide-deploying-jboss-eap-aws"&gt;A visual guide to deploying JBoss EAP on AWS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/08/introduction-debug-events-learn-how-use-breakpoints"&gt;An introduction to debug events: Learn how to use breakpoints&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/07/build-reactive-apps-kubernetes-using-camel-k"&gt;Build reactive apps on Kubernetes using Camel K&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/03/nodejs-reference-architecture-part-10-accessibility"&gt;Node.js Reference Architecture, Part 10: Accessibility&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/03/how-next-10-project-supports-future-nodejs"&gt;How the Next-10 project supports the future of Node.js&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/11/01/how-kamelets-simplify-camel-integrations-kubernetes"&gt;How Kamelets simplify Camel integrations on Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/10/31/best-practices-application-shutdown-openssl"&gt;Best practices for application shutdown with OpenSSL&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/24/net-go-kamelets-and-more-top-articles-november-2022" title=".NET, Go, Kamelets, and more: Top articles from November 2022"&gt;.NET, Go, Kamelets, and more: Top articles from November 2022&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Heiker Medina</dc:creator><dc:date>2022-11-24T07:00:00Z</dc:date></entry><entry><title>Reactive CRUD Performance: A Case Study</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/reactive-crud-performance-case-study/&#xA;            " /><author><name>John O'Hara (https://twitter.com/JohnnyDoItAll)</name></author><id>https://quarkus.io/blog/reactive-crud-performance-case-study/</id><updated>2022-11-23T23:00:00Z</updated><published>2022-11-23T23:00:00Z</published><summary type="html">We were approached for comment about the relative performance of Quarkus for a reactive CRUD workload. This is a good case study into performance test design and some of the considerations required and hurdles that need to be overcome. What methodology can we derive for ensuring that the test we...</summary><dc:creator>John O'Hara (https://twitter.com/JohnnyDoItAll)</dc:creator><dc:date>2022-11-23T23:00:00Z</dc:date></entry><entry><title type="html">Kogito Serverless Workflow event formats</title><link rel="alternate" href="https://blog.kie.org/2022/11/kogito-serverless-workflow-event-formats.html" /><author><name>Francisco Javier Tirado Sarti</name></author><id>https://blog.kie.org/2022/11/kogito-serverless-workflow-event-formats.html</id><updated>2022-11-23T18:56:28Z</updated><content type="html">The relies on for event publishing and consumption. CloudEvents are designed in a way that might work with any event format. That goal is achieved by declaring the data property, the one containing the event information, as an array of bytes.  expects that incoming and outgoing events represent a CloudEvent and that its data property content is convertible to a JSON object. The process of converting the CloudEvent to an object that can be understood by an external event broker is called marshaling. The inverse procedure, the one that converts the external event broker object into a CloudEvent is called unmarshaling. They are usually, but not always, coupled and I will refer to both of them as (un)marshal procedure for brevity.  When Kogito is running on the Quarkus platform, integration with external event brokers is performed through, as described in this .  The main abstraction provided by a Smallrye connector is the channel. By default, Kogito assumes that all channels within a Workflow application use the same logic for marshaling and unmarshaling. However, in complex applications, the event format used by a channel might be different from the one used by other channels within the same application, therefore Kogito provides means to specify which (un)marshal procedure should be used for each channel.  This post describes (un)marshal procedures provided by Kogito Serverless Workflow out of the box and focuses on how to set up a workflow application to use them, either globally or channel specific. It also discusses how to add new (un)marshal procedures to Kogito Serverless Workflows programmatically, if the included ones are not suitable. The only thing you will need is basic Java knowledge and some familiarity with J2EE CDI functionality, specifically the annotation.  APPLICATION (UN)MARSHALER As mentioned previously, if nothing is configured, Kogito Serverless workflow assumes all channels within the same application utilize the same (un)marshall procedure, based on library. This means that Jackson parser should be able to convert the Smallrye message payload into a JSON object without errors and vice versa.  Let’s assume you want your application to use a different event format. We are going to describe how to do that for , taking advantage of the fact that Kogito Serverless provides out of the box an (un)marshaler based on the CloudEvent specification . However, you should be aware that the same procedure can be used to configure  any  other (un)marshaler.  There are the steps you need to follow: 1. Add kogito-marshallers-avro dependency to your pom.xml &lt;dependency&gt;   &lt;groupId&gt;org.kie.kogito&lt;/groupId&gt;   &lt;artifactId&gt;kogito-addons-quarkus-marshallers-avro&lt;/artifactId&gt; &lt;/dependency&gt; 2. Define, under /src/main/java, a bean factory class that creates the desired bean definitions for and interfaces. In the class below, we are using the implementations provided by Kogito marshaller addon included as dependency in the previous step.  @ApplicationScoped public class ApplicationMarshallerProducer {     private AvroIO avroIO;     @PostConstruct     void init() throws IOException {             avroIO = new AvroIO();     }     @Produces     public CloudEventUnmarshallerFactory&lt;byte[]&gt; getAvroCloudEventUnmarshallerFactory() {             return new AvroCloudEventUnmarshallerFactory(avroIO);     }     @Produces     public CloudEventMarshaller&lt;byte[]&gt; getAvroCloudEventMarshaller() {               return new AvroCloudEventMarshaller(avroIO);     } } The previous setup assumes that all messages have as payload an array of bytes. When using Kafka, this is achieved by using the proper serializer and deserializer. In order to do that, you should  set these properties for every channel: mp.messaging.outgoing.&lt;channelName&gt;.value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer mp.messaging.outgoing.&lt;channelName&gt;.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer You might be wondering why you need to add a Java class to set up the global marshaller. This is intentional to allow flexibility. For example, you might want your application consumes Avro event format and republish them in Json event format. To do that, you just need to set up the marshaller to be the Jackson one and unmarshaller to be the Avro one, using a Java class as below.  @ApplicationScoped public class ApplicationMarshallerProducer {         @Inject     ObjectMapper objectMapper;     private AvroIO avroIO;        @PostConstruct     void init() throws IOException {             avroIO = new AvroIO();     }     @Produces     public CloudEventUnmarshallerFactory&lt;byte[]&gt; getAvroCloudEventUnmarshallerFactory() {             return new AvroCloudEventUnmarshallerFactory(avroIO);     }     @Produces     public CloudEventMarshaller&lt;byte[]&gt; getJacksonCloudEventMarshaller()      {               return new ByteArrayEventMarshaller(objectMapper);     } } PER CHANNEL (UN)MARSHALER You have learned how to set up the application level (un)marshaler procedure, but what happens if your application defines several incoming channels, one of them is expecting events to arrive in avro format, and the other one expects json format? The answer is pretty easy, since the default (un)marshaller procedure is based on Jackson, you just need to configure the channel that consumes Avro events to use the Avro unmarshaller.  In order to do that, you need to perform the following steps: 1. Add kogito-marshallers-avro dependency to your pom.xml &lt;dependency&gt;   &lt;groupId&gt;org.kie.kogito&lt;/groupId&gt;   &lt;artifactId&gt;kogito-addons-quarkus-marshallers-avro&lt;/artifactId&gt; &lt;/dependency&gt; 2. Define a named bean for the CloudEventUnmarshallerFactory interface, annotated with ChannelFormat annotation. In the class below,  the bean name is “avro” and the implementation is the one provided by the Kogito marshaller addon.  @ApplicationScoped public class AvroMarshallerProducer {     private AvroIO avroIO;     @PostConstruct     void init() throws IOException {         avroIO = new AvroIO();     }     @Produces     @Named(“avro”)     @ChannelFormat     public CloudEventUnmarshallerFactory&lt;byte[]&gt; getAvroCloudEventUnmarshallerFactory() {         return new AvroCloudEventUnmarshallerFactory(avroIO);     } } 3. Add a property that establishes the mapping between the channel and the bean name. The property formats are: *  kogito.addon.messaging.unmarshaller.&lt;channelName&gt;=&lt;beanName&gt; for incoming  channels. *  kogito.addon.messaging.marshaller.&lt;channelName&gt;=&lt;beanName&gt; for outgoing channels. Notice that you can map several channels to the same bean. For example, if the channel name is applicants, since your channel is incoming, you need to add this line to application.properties kogito.addon.messaging.unmarshaller.applicants=avro If your application had two incoming channels using avro, you would need to add: kogito.addon.messaging.unmarshaller.newApplicants=avro kogito.addon.messaging.unmarshaller.legacyAppicant=avro You can  find a serverless workflow application using Avro and Json for incoming channels in the Kogito examples .  ADDING CUSTOM MARSHALLERS You already know how to set up application and channel level (un)marshaller procedures using predefined Kogito ones: Jackson and Avro, but what happens if your channels use a different format? In that case, you need to provide your own implementation of the (un)marshaller procedure.  You probably are already aware that setting up a custom (un)marshaller procedure is equivalent to using a predefined one. The difference is that rather than including an existing Kogito addon as dependency in your pom and utilize the classes defined there to produce the required CDI beans, you need to develop your own classes and use them as CDI beans instead. Therefore this section explains which Kogito interfaces need to be implemented to do so. It is assumed that you are fluent in Java.  There are three interfaces to implement, CloudEventMarshaller, and CloudEventUnmarshallerFactory. You can use the as a reference to follow the explanation in the paragraphs below.  UNMARSHALLER IMPLEMENTATION CloudEventUnmarshallerFactory is responsible for creating CloudEventUnmarshaller instances suitable for the provided class parameter, which in the case of Serverless Workflow is always (remember that Kogito is intended to work also with BPMN, which uses ) Therefore, let’s focus on CloudEventUnmarshaller, which is responsible for converting the message payload into a CloudEvent and its data property into a JsonNode.  public interface CloudEventUnmarshaller&lt;I, O&gt; {     /**     * Create Cloud Event from structure event payload     *     * @return Cloud Event     */     Converter&lt;I, CloudEvent&gt; cloudEvent();     /**     * Create Cloud Event from binary event payload     *     * @return Cloud Event Data     */     Converter&lt;I, CloudEventData&gt; binaryCloudEvent();     /**     * Creates Kogito business object from Cloud Event data     *     * @return Kogito Businnes Object     */     Converter&lt;CloudEventData, O&gt; data(); } Let’s start first with the generic type I, which represents the possible message payloads. Currently, there are three of them: String, byte[] and Object. Note that Avro (un)marshaller procedure assumes that it is a byte[]. Generic type O is the target object type, which, as mentioned, is always JsonNode for Serverless Workflow.  Finally, there is the interface, which is a checked version of . This interface is responsible for converting from source type to target type and throws an if there is any conversion issue. An unmarshaller implementation should provide three converters: 1. cloudEvent method converter is used when the CloudEvent is delivered as   2. binaryCloudEvent method converter is used when the CloudEvent is delivered as .  3. data method converter is used regardless of the mode message to convert CloudEventData into the target object type.  MARSHALLER IMPLEMENTATION  CloudEventMarshaller interface is responsible for transforming the CloudEvent into a message payload. Note that Kogito assumes structure mode for publishing.  public interface CloudEventMarshaller&lt;R&gt; {     /**     * Convert cloud event into the type expected by the external service     *     * @param event Cloud event to be converted     * @return object to be sent to the external service     * @throws IOException if there is a conversion problem. This method must NOT report event formatting issues through a runtime exception, it must use IOException. This way the caller     *         can differentiate between unexpected issues and event formatting ones.     */     R marshall(CloudEvent event) throws IOException;     /**     * Convert Kogito business object into a CloudEventData for marshaling     *     * @param &lt;T&gt; the Kogito business object type     * @return A CloudEventData that will be marshaled.     */     &lt;T&gt; Function&lt;T, CloudEventData&gt; cloudEventDataFactory(); } GenericType R represents the target message payload type. Possible types are byte[], String and Object.  There are two methods to implement:  1. Marshall methods convert the CloudEvent into the target message payload.  2. cloudEventDataFactory is used internally by Kogito when a CloudEvent is built, for publishing  purposes, to fill its data property. It  converts the Kogito business object (JsonNode in the case of a Serverless Workflow), represented by generic type T, into a CloudEventData instance. This method belongs to the marshaller interface because the CloudEventData implementation to be part of the CloudEvent usually depends on the marshaling procedure.  The post appeared first on .</content><dc:creator>Francisco Javier Tirado Sarti</dc:creator></entry></feed>
